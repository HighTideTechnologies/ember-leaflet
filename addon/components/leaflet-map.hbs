{{#each this.leafletDescriptorsProps as |prop|}}
  {{#if (eq prop "center")}}
    {{did-update (fn this.updateOption "center") this.center}}
  {{else}}
    {{did-update (fn this.updateOption prop) (get this.args prop)}}
  {{/if}}
{{/each}}

<Root @didInsertParent={{this.didInsertParent}} @willDestroyParent={{this.willDestroyParent}} ...attributes as |Node|>
  {{#let (hash
    tile=(component "tile-layer" parent=this node=Node)
    wms-tile=(component "wms-tile-layer" parent=this node=Node)
    marker=(component "marker-layer" parent=this node=Node)
    circle=(component "circle-layer" parent=this node=Node)
    circle-marker=(component "circle-marker-layer" parent=this node=Node)
    image=(component "image-layer" parent=this node=Node)
    video=(component "video-layer" parent=this node=Node)
    polyline=(component "polyline-layer" parent=this node=Node)
    polygon=(component "polygon-layer" parent=this node=Node)
    geojson=(component "geojson-layer" parent=this node=Node)
    rectangle=(component "rectangle-layer" parent=this node=Node)
  ) as |components|}}
    {{!--
      Here we need to create the addon registered contextual components to yield later
    --}}
    {{#if this.emberLeaflet.components}}
      {{#each this.emberLeaflet.components as |c|}}
        {{ember-leaflet-assign-to
          components
          key=c.as
          value=(component c.name parent=this)
          onChange=this.mergeComponents
        }}
      {{/each}}

      {{yield this.mergedComponents}}
    {{else}}
      {{yield components}}
    {{/if}}
  {{/let}}
</Root>